# -*- coding: utf-8 -*-
"""
Solution to the Probability of an Outcome Given a Hidden Path Problem.
Finding Mutations in DNA and Proteins (Bioinformatics VI) on Coursera.org
Week 4, code challenge #2
https://stepik.org/lesson/Hidden-Markov-Models-Code-Challenges-(Week-1)-11594/step/4?course=Stepic-Interactive-Text-for-Week-4&unit=9008
"""

import numpy as np

def hidden_path_probability(input_matrix,states,path,emission_string,emission_letters):
    '''
    Probability of an Outcome Given a Hidden Path Problem.
    
    Parameters
    --------
    input_matrix: Emission matrix (string)
    states:  Collection of states of the HMM (list of strings)     
    path: hidden path π
    emission_string: A sequence of emitted symbols generated by a HMM (string)
    emission_letters: The HMM's alphabet Σ (list of strings)
    
    Return
    --------
    The conditional probability Pr(x|π) that x will be emitted given that the HMM
    follows the hidden path π. (floating point number)
    '''
    transition_dict = create_dict_hmm(input_matrix,states,emission_letters)
    product = 1
    for i in range(len(path)):
        outgoing_index = emission_letters.index(emission_string[i])
        weight = transition_dict[path[i]][outgoing_index]
        product = product*weight
    return product
    
def create_dict_hmm(input_matrix,states,emission_letters):
    '''
    Convert the input matrix into a dictionary.
    '''
    num_emission_letters = len(emission_letters)
    input_matrix_array = np.array(input_matrix.split())
    transition_matrix = np.array([float(x) for x in input_matrix_array if x not in states and x not in emission_letters])
    transition_dict = {}
    for i,state in enumerate(states):
        values = transition_matrix[i*num_emission_letters:i*num_emission_letters + num_emission_letters]
        transition_dict[state] = values
    return transition_dict
    
##############################################################
if __name__ == "__main__":
    sample_path = 'BAAAAAAAAA'
    states = 'A B'.split()
    emission_string = 'zzzyxyyzzx'
    emission_letters = 'x y z'.split()
    matrix = '''x	y	z
    A	0.176	0.596	0.228
    B	0.225	0.572	0.203'''
    
    print hidden_path_probability(matrix,states,sample_path,emission_string,emission_letters)